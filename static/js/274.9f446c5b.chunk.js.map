{"version":3,"file":"static/js/274.9f446c5b.chunk.js","mappings":"8KAIA,MAqCA,EArCkBA,IAA0D,IAAzD,KAAEC,EAAI,KAAEC,EAAO,OAAM,MAAEC,EAAK,YAAEC,EAAcD,GAAOH,EACpE,MAAOK,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAOC,IAAQC,EAAAA,EAAAA,IAAST,IAEzB,MAAEU,EAAK,QAAEC,EAAO,MAAEC,GAAUJ,GAC1BR,KAAMa,GAAcN,EAEtBO,EAA0B,aAATb,EAEvB,OACEc,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOC,QAASL,EAAUG,SAAEd,KAC5Ba,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CACJC,GAAIP,KACAN,EACJN,KAAMa,EAAkBV,EAAU,OAAS,WAAcH,EACzDE,YAAaA,EACbkB,aAAa,iBAEdP,IACCG,EAAAA,EAAAA,KAAA,UAAQhB,KAAK,SAASqB,QAASA,IAAMjB,GAAYD,GAASY,SACvDZ,GAAUa,EAAAA,EAAAA,KAACM,EAAAA,IAAY,KAAMN,EAAAA,EAAAA,KAACO,EAAAA,IAAe,SAInDd,GAASC,IAAWM,EAAAA,EAAAA,KAAA,OAAKQ,MAAO,CAAEC,MAAO,OAAQV,SAAEN,KAElDA,GAASE,IACTG,EAAAA,EAAAA,MAAA,OAAKU,MAAO,CAAEC,MAAO,SAAUV,SAAA,EAC7BC,EAAAA,EAAAA,KAACU,EAAAA,IAAa,IAAG,YAAUd,OAG3B,C,oECjCV,MA2CA,EA3CsBd,IAOf,IAPgB,cACrB6B,EAAa,iBACbC,EAAgB,kBAChBC,EAAiB,UACjBC,EAAS,aACTC,EAAY,SACZhB,GACDjB,EACC,MAAMkC,GAAWC,EAAAA,EAAAA,MAcXC,EAAWH,GAZWI,EAACC,EAAMC,KAAoC,IAAlC,UAAEC,EAAS,cAAEC,GAAeF,EAC/DL,EAASF,EAAUM,IAASI,MAAKC,IAAyB,IAAxB,MAAEhC,EAAK,QAAEiC,GAASD,EAClDF,GAAc,GAEV9B,EACFkC,MAAM,UAAUD,KAGlBJ,GAAW,GACX,GAKJ,OACEtB,EAAAA,EAAAA,KAAC4B,EAAAA,GAAM,CACLjB,cAAeA,EACfC,iBAAkBA,EAClBiB,kBAAgB,EAChBX,SAAUA,EAASnB,SAEjB+B,IACAhC,EAAAA,EAAAA,MAAA,QAAMoB,SAAUY,EAAMf,aAAahB,SAAA,CAChCA,GACDC,EAAAA,EAAAA,KAAA,UAAQhB,KAAK,SAAS+C,SAAUD,EAAME,aAAajC,SAChDc,QAIA,C,+FCtCb,MAAMF,EAAgB,CACpB5B,KAAM,GACNkD,MAAO,GACPC,SAAU,IA6BZ,EA1BqBC,KAEjBrC,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CACZzB,cAAeA,EACfC,iBAAkByB,EAAAA,EAClBvB,UAAWwB,EAAAA,GACXC,iBAAiB,UAASxC,SAAA,EAE1BC,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CAACzD,KAAK,OAAOE,MAAM,OAAOC,YAAY,qBAChDc,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRzD,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,YAAY,iBAGdc,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRzD,KAAK,WACLC,KAAK,WACLC,MAAM,WACNC,YAAY,sBCnBpB,EAVqBuD,KAEjBzC,EAAAA,EAAAA,KAAA,WAAAD,UACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACmC,EAAY,O,sDCJd,MAAMO,EAAcC,EAAAA,KAAaC,MAAM,CAC5CX,MAAOU,EAAAA,KACJE,QAAQ,mCAAoC,4BAC5CC,SAAS,qBACZZ,SAAUS,EAAAA,KACPG,SAAS,wBACTC,IAAI,EAAG,uDAGCV,EAAeM,EAAAA,KAAaC,MAAM,CAC7C7D,KAAM4D,EAAAA,KACHI,IAAI,EAAG,cACPF,QAAQ,cAAe,wBACvBC,SAAS,YACZb,MAAOU,EAAAA,KACJE,QAAQ,mCAAoC,4BAC5CC,SAAS,qBACZZ,SAAUS,EAAAA,KACPG,SAAS,wBACTC,IAAI,EAAG,sD","sources":["components/FormInput/FormInput.jsx","components/UniversalForm/UniversalForm.jsx","components/RegistrForm/RegisterForm.jsx","pages/RegisterPage.jsx","yupSchemas/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Field, useField } from \"formik\";\nimport { MdVisibility, MdVisibilityOff, MdCheckCircle } from \"react-icons/md\";\n\nconst FormInput = ({ name, type = \"text\", label, placeholder = label }) => {\n  const [visible, setVisible] = useState(false);\n  const [field, meta] = useField(name);\n\n  const { error, touched, value } = meta;\n  const { name: inputName } = field;\n\n  const typeIsPassword = type === \"password\";\n\n  return (\n    <div>\n      <label htmlFor={inputName}>{label}</label>\n      <div>\n        <Field\n          id={inputName}\n          {...field}\n          type={typeIsPassword ? (visible ? \"text\" : \"password\") : type}\n          placeholder={placeholder}\n          autoComplete=\"new-password\"\n        />\n        {typeIsPassword && (\n          <button type=\"button\" onClick={() => setVisible(!visible)}>\n            {visible ? <MdVisibility /> : <MdVisibilityOff />}\n          </button>\n        )}\n      </div>\n      {error && touched && <div style={{ color: \"red\" }}>{error}</div>}\n\n      {!error && value && (\n        <div style={{ color: \"green\" }}>\n          <MdCheckCircle /> Success {inputName}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\n\nconst UniversalForm = ({\n  initialValues,\n  validationSchema,\n  labelButtonSubmit,\n  operation,\n  handleSubmit,\n  children,\n}) => {\n  const dispatch = useDispatch();\n\n  const defaultHandleSubmit = (values, { resetForm, setSubmitting }) => {\n    dispatch(operation(values)).then(({ error, payload }) => {\n      setSubmitting(false);\n\n      if (error) {\n        alert(`Error: ${payload}`); // Folosirea unei alerte simple Ã®n loc de toast\n        return;\n      }\n      resetForm();\n    });\n  };\n\n  const onSubmit = handleSubmit || defaultHandleSubmit;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      validateOnChange\n      onSubmit={onSubmit}\n    >\n      {(props) => (\n        <form onSubmit={props.handleSubmit}>\n          {children}\n          <button type=\"submit\" disabled={props.isSubmitting}>\n            {labelButtonSubmit}\n          </button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UniversalForm;\n","import { register } from \"../../redux/auth/operations\";\nimport FormInput from \"../FormInput/FormInput\";\nimport UniversalForm from \"../UniversalForm/UniversalForm\";\nimport { SignUpSchema } from \"../../yupSchemas/index\";\n\nconst initialValues = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n};\n\nconst RegisterForm = () => {\n  return (\n    <UniversalForm\n      initialValues={initialValues}\n      validationSchema={SignUpSchema}\n      operation={register}\n      labelButtonSbmit=\"Sign up\"\n    >\n      <FormInput name=\"name\" label=\"Name\" placeholder=\"Enter nick-name\" />\n      <FormInput\n        name=\"email\"\n        type=\"email\"\n        label=\"Email\"\n        placeholder=\"Enter email\"\n      />\n\n      <FormInput\n        name=\"password\"\n        type=\"password\"\n        label=\"Password\"\n        placeholder=\"Enter password\"\n      />\n    </UniversalForm>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from \"../components/RegistrForm/RegisterForm\";\n\nconst RegisterPage = () => {\n  return (\n    <section>\n      <div>\n        <RegisterForm />\n      </div>\n    </section>\n  );\n};\n\nexport default RegisterPage;\n","import * as Yup from 'yup';\n\nexport const LogInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(5, 'Password is too short - should be 5 chars minimum'),\n});\n\nexport const SignUpSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .matches(/^[A-Za-z]+$/, 'Only English letters')\n    .required('Required'),\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(7, 'Password is too short - should be 7 chars minimum'),\n});\n"],"names":["_ref","name","type","label","placeholder","visible","setVisible","useState","field","meta","useField","error","touched","value","inputName","typeIsPassword","_jsxs","children","_jsx","htmlFor","Field","id","autoComplete","onClick","MdVisibility","MdVisibilityOff","style","color","MdCheckCircle","initialValues","validationSchema","labelButtonSubmit","operation","handleSubmit","dispatch","useDispatch","onSubmit","defaultHandleSubmit","values","_ref2","resetForm","setSubmitting","then","_ref3","payload","alert","Formik","validateOnChange","props","disabled","isSubmitting","email","password","RegisterForm","UniversalForm","SignUpSchema","register","labelButtonSbmit","FormInput","RegisterPage","LogInSchema","Yup","shape","matches","required","min"],"sourceRoot":""}