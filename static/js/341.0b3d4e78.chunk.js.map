{"version":3,"file":"static/js/341.0b3d4e78.chunk.js","mappings":"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","sources":["components/FormInput/FormInput.jsx","components/UniversalForm/UniversalForm.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","yupSchemas/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Field, useField } from \"formik\";\nimport { MdVisibility, MdVisibilityOff, MdCheckCircle } from \"react-icons/md\";\n\nconst FormInput = ({ name, type = \"text\", label, placeholder = label }) => {\n  const [visible, setVisible] = useState(false);\n  const [field, meta] = useField(name);\n  const { error, touched, value } = meta;\n  const inputName = field.name;\n  const typeIsPassword = type === \"password\";\n\n  return (\n    <div className=\"mb-4\">\n      <label\n        htmlFor={inputName}\n        className=\"block text-gray-700 text-sm font-bold mb-2\"\n      >\n        {label}\n      </label>\n      <div className=\"relative\">\n        <Field\n          id={inputName}\n          {...field}\n          type={typeIsPassword ? (visible ? \"text\" : \"password\") : type}\n          placeholder={placeholder}\n          autoComplete=\"new-password\"\n          className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${\n            error && touched ? \"border-red-500\" : \"\"\n          }`}\n        />\n        {typeIsPassword && (\n          <button\n            type=\"button\"\n            onClick={() => setVisible(!visible)}\n            className=\"absolute inset-y-0 right-0 flex items-center px-2\"\n          >\n            {visible ? <MdVisibility /> : <MdVisibilityOff />}\n          </button>\n        )}\n      </div>\n      {error && touched && (\n        <div className=\"text-red-500 text-xs italic\">{error}</div>\n      )}\n      {!error && value && (\n        <div className=\"flex items-center text-green-500 text-sm\">\n          <MdCheckCircle className=\"mr-1\" /> Success {inputName}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\n\nconst UniversalForm = ({\n  initialValues,\n  validationSchema,\n  labelButtonSubmit,\n  operation,\n  handleSubmit,\n  children,\n}) => {\n  const dispatch = useDispatch();\n\n  const defaultHandleSubmit = (values, { resetForm, setSubmitting }) => {\n    dispatch(operation(values)).then(({ error, payload }) => {\n      setSubmitting(false);\n      if (error) {\n        alert(`Error: ${payload}`);\n        return;\n      }\n      resetForm();\n    });\n  };\n\n  const onSubmit = handleSubmit || defaultHandleSubmit;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      validateOnChange\n      onSubmit={onSubmit}\n    >\n      {(props) => (\n        <form\n          onSubmit={props.handleSubmit}\n          className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\"\n        >\n          <div className=\"mb-4\">{children}</div>\n          <button\n            type=\"submit\"\n            disabled={props.isSubmitting}\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            {labelButtonSubmit}\n          </button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UniversalForm;\n","import { logIn } from \"../../redux/auth/operations\";\nimport FormInput from \"../FormInput/FormInput\";\nimport UniversalForm from \"../UniversalForm/UniversalForm\";\nimport { LogInSchema } from \"../../yupSchemas/index\";\n\nconst initialValues = {\n  email: \"\",\n  password: \"\",\n};\n\nconst LoginForm = () => {\n  return (\n    <div className=\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md\">\n      <h2 className=\"text-2xl font-bold text-center text-blue-600 mb-4\">\n        Log In\n      </h2>\n      <UniversalForm\n        initialValues={initialValues}\n        validationSchema={LogInSchema}\n        operation={logIn}\n        labelButtonSubmit=\"Log in\"\n      >\n        <FormInput\n          name=\"email\"\n          type=\"email\"\n          label=\"Email\"\n          placeholder=\"Enter email\"\n        />\n        <FormInput\n          name=\"password\"\n          type=\"password\"\n          label=\"Password\"\n          placeholder=\"Enter password\"\n        />\n      </UniversalForm>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import { useSelector } from \"react-redux\";\nimport { selectIsLoggedIn } from \"../redux/auth/selector\";\nimport LoginForm from \"../components/LoginForm/LoginForm\";\n\nconst LoginPage = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    <section>\n      <div>{!isLoggedIn && <LoginForm />}</div>\n    </section>\n  );\n};\n\nexport default LoginPage;\n","import * as Yup from 'yup';\n\nexport const LogInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(5, 'Password is too short - should be 5 chars minimum'),\n});\n\nexport const SignUpSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .matches(/^[A-Za-z]+$/, 'Only English letters')\n    .required('Required'),\n  email: Yup.string()\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Is not in correct format')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(7, 'Password is too short - should be 7 chars minimum'),\n});\n"],"names":["_ref","name","type","label","placeholder","visible","setVisible","useState","field","meta","useField","error","touched","value","inputName","typeIsPassword","_jsxs","className","children","_jsx","htmlFor","Field","id","autoComplete","onClick","MdVisibility","MdVisibilityOff","MdCheckCircle","initialValues","validationSchema","labelButtonSubmit","operation","handleSubmit","dispatch","useDispatch","onSubmit","defaultHandleSubmit","values","_ref2","resetForm","setSubmitting","then","_ref3","payload","alert","Formik","validateOnChange","props","disabled","isSubmitting","email","password","LoginForm","UniversalForm","LogInSchema","logIn","FormInput","LoginPage","isLoggedIn","useSelector","selectIsLoggedIn","Yup","shape","matches","required","min","SignUpSchema"],"sourceRoot":""}